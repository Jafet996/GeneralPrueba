'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WsPricesmart
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="wsRecepcionSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class wsRecepcion
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ValidarDocumentoElectronico_SinReceptorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidarDocumentoElectronicoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecibirAcuseEmisorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtenerAcuseRecepcionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VistaPreviaAcuseRecepcionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidarDocumentoElectronico_RespuestaXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtenerAcuseRecepcion_RespuestaXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Business.My.MySettings.Default.Business_WsPricesmart_wsRecepcion
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ValidarDocumentoElectronico_SinReceptorCompleted As ValidarDocumentoElectronico_SinReceptorCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidarDocumentoElectronicoCompleted As ValidarDocumentoElectronicoCompletedEventHandler
        
        '''<remarks/>
        Public Event RecibirAcuseEmisorCompleted As RecibirAcuseEmisorCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtenerAcuseRecepcionCompleted As ObtenerAcuseRecepcionCompletedEventHandler
        
        '''<remarks/>
        Public Event VistaPreviaAcuseRecepcionCompleted As VistaPreviaAcuseRecepcionCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidarDocumentoElectronico_RespuestaXMLCompleted As ValidarDocumentoElectronico_RespuestaXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event ObtenerAcuseRecepcion_RespuestaXMLCompleted As ObtenerAcuseRecepcion_RespuestaXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event getVersionCompleted As getVersionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidarDocumentoElectronico_SinReceptor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ValidarDocumentoElectronico_SinReceptor(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByRef cRespuesta As String, ByRef cError As Boolean, ByRef cMensaje As String, ByRef cClaveFiscalDocumentoRecibido As String, ByVal cTipoMensaje As Integer)
            Dim results() As Object = Me.Invoke("ValidarDocumentoElectronico_SinReceptor", New Object() {cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cClaveFiscalDocumentoRecibido, cTipoMensaje})
            cRespuesta = CType(results(0),String)
            cError = CType(results(1),Boolean)
            cMensaje = CType(results(2),String)
            cClaveFiscalDocumentoRecibido = CType(results(3),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidarDocumentoElectronico_SinReceptorAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByVal cRespuesta As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal cClaveFiscalDocumentoRecibido As String, ByVal cTipoMensaje As Integer)
            Me.ValidarDocumentoElectronico_SinReceptorAsync(cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cClaveFiscalDocumentoRecibido, cTipoMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidarDocumentoElectronico_SinReceptorAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByVal cRespuesta As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal cClaveFiscalDocumentoRecibido As String, ByVal cTipoMensaje As Integer, ByVal userState As Object)
            If (Me.ValidarDocumentoElectronico_SinReceptorOperationCompleted Is Nothing) Then
                Me.ValidarDocumentoElectronico_SinReceptorOperationCompleted = AddressOf Me.OnValidarDocumentoElectronico_SinReceptorOperationCompleted
            End If
            Me.InvokeAsync("ValidarDocumentoElectronico_SinReceptor", New Object() {cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cClaveFiscalDocumentoRecibido, cTipoMensaje}, Me.ValidarDocumentoElectronico_SinReceptorOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidarDocumentoElectronico_SinReceptorOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidarDocumentoElectronico_SinReceptorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidarDocumentoElectronico_SinReceptorCompleted(Me, New ValidarDocumentoElectronico_SinReceptorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidarDocumentoElectronico", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ValidarDocumentoElectronico(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByRef cRespuesta As String, ByRef cError As Boolean, ByRef cMensaje As String, ByRef cClaveFiscalDocumentoRecibido As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByVal cTipoMensaje As Integer)
            Dim results() As Object = Me.Invoke("ValidarDocumentoElectronico", New Object() {cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cClaveFiscalDocumentoRecibido, cTipoIdReceptor, cIdReceptor, cTipoMensaje})
            cRespuesta = CType(results(0),String)
            cError = CType(results(1),Boolean)
            cMensaje = CType(results(2),String)
            cClaveFiscalDocumentoRecibido = CType(results(3),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidarDocumentoElectronicoAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByVal cRespuesta As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal cClaveFiscalDocumentoRecibido As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByVal cTipoMensaje As Integer)
            Me.ValidarDocumentoElectronicoAsync(cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cClaveFiscalDocumentoRecibido, cTipoIdReceptor, cIdReceptor, cTipoMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidarDocumentoElectronicoAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByVal cRespuesta As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal cClaveFiscalDocumentoRecibido As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByVal cTipoMensaje As Integer, ByVal userState As Object)
            If (Me.ValidarDocumentoElectronicoOperationCompleted Is Nothing) Then
                Me.ValidarDocumentoElectronicoOperationCompleted = AddressOf Me.OnValidarDocumentoElectronicoOperationCompleted
            End If
            Me.InvokeAsync("ValidarDocumentoElectronico", New Object() {cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cClaveFiscalDocumentoRecibido, cTipoIdReceptor, cIdReceptor, cTipoMensaje}, Me.ValidarDocumentoElectronicoOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidarDocumentoElectronicoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidarDocumentoElectronicoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidarDocumentoElectronicoCompleted(Me, New ValidarDocumentoElectronicoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecibirAcuseEmisor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RecibirAcuseEmisor(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByRef cRespuesta As String, ByRef cError As Boolean, ByRef cMensaje As String, ByRef cConsecutivoFiscal As String, ByRef cClaveFiscal As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String)
            Dim results() As Object = Me.Invoke("RecibirAcuseEmisor", New Object() {cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cConsecutivoFiscal, cClaveFiscal, cTipoIdReceptor, cIdReceptor})
            cRespuesta = CType(results(0),String)
            cError = CType(results(1),Boolean)
            cMensaje = CType(results(2),String)
            cConsecutivoFiscal = CType(results(3),String)
            cClaveFiscal = CType(results(4),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecibirAcuseEmisorAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByVal cRespuesta As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal cConsecutivoFiscal As String, ByVal cClaveFiscal As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String)
            Me.RecibirAcuseEmisorAsync(cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cConsecutivoFiscal, cClaveFiscal, cTipoIdReceptor, cIdReceptor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecibirAcuseEmisorAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByVal cRespuesta As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal cConsecutivoFiscal As String, ByVal cClaveFiscal As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByVal userState As Object)
            If (Me.RecibirAcuseEmisorOperationCompleted Is Nothing) Then
                Me.RecibirAcuseEmisorOperationCompleted = AddressOf Me.OnRecibirAcuseEmisorOperationCompleted
            End If
            Me.InvokeAsync("RecibirAcuseEmisor", New Object() {cUsuario, cContrasena, cXML, cRespuesta, cError, cMensaje, cConsecutivoFiscal, cClaveFiscal, cTipoIdReceptor, cIdReceptor}, Me.RecibirAcuseEmisorOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecibirAcuseEmisorOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecibirAcuseEmisorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecibirAcuseEmisorCompleted(Me, New RecibirAcuseEmisorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerAcuseRecepcion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ObtenerAcuseRecepcion(ByRef cClaveFiscalCR As String, ByRef cRespuestaXML As String, ByRef cDetalleMensaje As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByRef cConsecutivoAcuseRecepcion As String, ByRef cConsecutivoDocumentoRecibido As String, ByRef cFechaHora As String, ByRef cCorreoElectronicoEmisor As String, ByRef cError As Boolean, ByRef cMensaje As String, ByVal cForzarMensaje As Integer)
            Dim results() As Object = Me.Invoke("ObtenerAcuseRecepcion", New Object() {cClaveFiscalCR, cRespuestaXML, cDetalleMensaje, cTipoIdReceptor, cIdReceptor, cConsecutivoAcuseRecepcion, cConsecutivoDocumentoRecibido, cFechaHora, cCorreoElectronicoEmisor, cError, cMensaje, cForzarMensaje})
            cClaveFiscalCR = CType(results(0),String)
            cRespuestaXML = CType(results(1),String)
            cDetalleMensaje = CType(results(2),String)
            cConsecutivoAcuseRecepcion = CType(results(3),String)
            cConsecutivoDocumentoRecibido = CType(results(4),String)
            cFechaHora = CType(results(5),String)
            cCorreoElectronicoEmisor = CType(results(6),String)
            cError = CType(results(7),Boolean)
            cMensaje = CType(results(8),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtenerAcuseRecepcionAsync(ByVal cClaveFiscalCR As String, ByVal cRespuestaXML As String, ByVal cDetalleMensaje As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByVal cConsecutivoAcuseRecepcion As String, ByVal cConsecutivoDocumentoRecibido As String, ByVal cFechaHora As String, ByVal cCorreoElectronicoEmisor As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal cForzarMensaje As Integer)
            Me.ObtenerAcuseRecepcionAsync(cClaveFiscalCR, cRespuestaXML, cDetalleMensaje, cTipoIdReceptor, cIdReceptor, cConsecutivoAcuseRecepcion, cConsecutivoDocumentoRecibido, cFechaHora, cCorreoElectronicoEmisor, cError, cMensaje, cForzarMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtenerAcuseRecepcionAsync(ByVal cClaveFiscalCR As String, ByVal cRespuestaXML As String, ByVal cDetalleMensaje As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByVal cConsecutivoAcuseRecepcion As String, ByVal cConsecutivoDocumentoRecibido As String, ByVal cFechaHora As String, ByVal cCorreoElectronicoEmisor As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal cForzarMensaje As Integer, ByVal userState As Object)
            If (Me.ObtenerAcuseRecepcionOperationCompleted Is Nothing) Then
                Me.ObtenerAcuseRecepcionOperationCompleted = AddressOf Me.OnObtenerAcuseRecepcionOperationCompleted
            End If
            Me.InvokeAsync("ObtenerAcuseRecepcion", New Object() {cClaveFiscalCR, cRespuestaXML, cDetalleMensaje, cTipoIdReceptor, cIdReceptor, cConsecutivoAcuseRecepcion, cConsecutivoDocumentoRecibido, cFechaHora, cCorreoElectronicoEmisor, cError, cMensaje, cForzarMensaje}, Me.ObtenerAcuseRecepcionOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtenerAcuseRecepcionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtenerAcuseRecepcionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtenerAcuseRecepcionCompleted(Me, New ObtenerAcuseRecepcionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VistaPreviaAcuseRecepcion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub VistaPreviaAcuseRecepcion(ByRef cClaveFiscalCR As String, ByRef cRespuestaXML As String, ByRef cDetalleMensaje As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByRef cConsecutivoAcuseRecepcion As String, ByRef cConsecutivoDocumentoRecibido As String, ByRef cFechaHora As String, ByRef cCorreoElectronicoEmisor As String, ByRef cError As Boolean, ByRef cMensaje As String)
            Dim results() As Object = Me.Invoke("VistaPreviaAcuseRecepcion", New Object() {cClaveFiscalCR, cRespuestaXML, cDetalleMensaje, cTipoIdReceptor, cIdReceptor, cConsecutivoAcuseRecepcion, cConsecutivoDocumentoRecibido, cFechaHora, cCorreoElectronicoEmisor, cError, cMensaje})
            cClaveFiscalCR = CType(results(0),String)
            cRespuestaXML = CType(results(1),String)
            cDetalleMensaje = CType(results(2),String)
            cConsecutivoAcuseRecepcion = CType(results(3),String)
            cConsecutivoDocumentoRecibido = CType(results(4),String)
            cFechaHora = CType(results(5),String)
            cCorreoElectronicoEmisor = CType(results(6),String)
            cError = CType(results(7),Boolean)
            cMensaje = CType(results(8),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VistaPreviaAcuseRecepcionAsync(ByVal cClaveFiscalCR As String, ByVal cRespuestaXML As String, ByVal cDetalleMensaje As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByVal cConsecutivoAcuseRecepcion As String, ByVal cConsecutivoDocumentoRecibido As String, ByVal cFechaHora As String, ByVal cCorreoElectronicoEmisor As String, ByVal cError As Boolean, ByVal cMensaje As String)
            Me.VistaPreviaAcuseRecepcionAsync(cClaveFiscalCR, cRespuestaXML, cDetalleMensaje, cTipoIdReceptor, cIdReceptor, cConsecutivoAcuseRecepcion, cConsecutivoDocumentoRecibido, cFechaHora, cCorreoElectronicoEmisor, cError, cMensaje, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VistaPreviaAcuseRecepcionAsync(ByVal cClaveFiscalCR As String, ByVal cRespuestaXML As String, ByVal cDetalleMensaje As String, ByVal cTipoIdReceptor As String, ByVal cIdReceptor As String, ByVal cConsecutivoAcuseRecepcion As String, ByVal cConsecutivoDocumentoRecibido As String, ByVal cFechaHora As String, ByVal cCorreoElectronicoEmisor As String, ByVal cError As Boolean, ByVal cMensaje As String, ByVal userState As Object)
            If (Me.VistaPreviaAcuseRecepcionOperationCompleted Is Nothing) Then
                Me.VistaPreviaAcuseRecepcionOperationCompleted = AddressOf Me.OnVistaPreviaAcuseRecepcionOperationCompleted
            End If
            Me.InvokeAsync("VistaPreviaAcuseRecepcion", New Object() {cClaveFiscalCR, cRespuestaXML, cDetalleMensaje, cTipoIdReceptor, cIdReceptor, cConsecutivoAcuseRecepcion, cConsecutivoDocumentoRecibido, cFechaHora, cCorreoElectronicoEmisor, cError, cMensaje}, Me.VistaPreviaAcuseRecepcionOperationCompleted, userState)
        End Sub
        
        Private Sub OnVistaPreviaAcuseRecepcionOperationCompleted(ByVal arg As Object)
            If (Not (Me.VistaPreviaAcuseRecepcionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VistaPreviaAcuseRecepcionCompleted(Me, New VistaPreviaAcuseRecepcionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidarDocumentoElectronico_RespuestaXML", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidarDocumentoElectronico_RespuestaXML(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String) As String
            Dim results() As Object = Me.Invoke("ValidarDocumentoElectronico_RespuestaXML", New Object() {cUsuario, cContrasena, cXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidarDocumentoElectronico_RespuestaXMLAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String)
            Me.ValidarDocumentoElectronico_RespuestaXMLAsync(cUsuario, cContrasena, cXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidarDocumentoElectronico_RespuestaXMLAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cXML As String, ByVal userState As Object)
            If (Me.ValidarDocumentoElectronico_RespuestaXMLOperationCompleted Is Nothing) Then
                Me.ValidarDocumentoElectronico_RespuestaXMLOperationCompleted = AddressOf Me.OnValidarDocumentoElectronico_RespuestaXMLOperationCompleted
            End If
            Me.InvokeAsync("ValidarDocumentoElectronico_RespuestaXML", New Object() {cUsuario, cContrasena, cXML}, Me.ValidarDocumentoElectronico_RespuestaXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidarDocumentoElectronico_RespuestaXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidarDocumentoElectronico_RespuestaXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidarDocumentoElectronico_RespuestaXMLCompleted(Me, New ValidarDocumentoElectronico_RespuestaXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObtenerAcuseRecepcion_RespuestaXML", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtenerAcuseRecepcion_RespuestaXML(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cClaveFiscalCR As String) As String
            Dim results() As Object = Me.Invoke("ObtenerAcuseRecepcion_RespuestaXML", New Object() {cUsuario, cContrasena, cClaveFiscalCR})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtenerAcuseRecepcion_RespuestaXMLAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cClaveFiscalCR As String)
            Me.ObtenerAcuseRecepcion_RespuestaXMLAsync(cUsuario, cContrasena, cClaveFiscalCR, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtenerAcuseRecepcion_RespuestaXMLAsync(ByVal cUsuario As String, ByVal cContrasena As String, ByVal cClaveFiscalCR As String, ByVal userState As Object)
            If (Me.ObtenerAcuseRecepcion_RespuestaXMLOperationCompleted Is Nothing) Then
                Me.ObtenerAcuseRecepcion_RespuestaXMLOperationCompleted = AddressOf Me.OnObtenerAcuseRecepcion_RespuestaXMLOperationCompleted
            End If
            Me.InvokeAsync("ObtenerAcuseRecepcion_RespuestaXML", New Object() {cUsuario, cContrasena, cClaveFiscalCR}, Me.ObtenerAcuseRecepcion_RespuestaXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtenerAcuseRecepcion_RespuestaXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtenerAcuseRecepcion_RespuestaXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtenerAcuseRecepcion_RespuestaXMLCompleted(Me, New ObtenerAcuseRecepcion_RespuestaXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getVersion() As String
            Dim results() As Object = Me.Invoke("getVersion", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVersionAsync()
            Me.getVersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVersionAsync(ByVal userState As Object)
            If (Me.getVersionOperationCompleted Is Nothing) Then
                Me.getVersionOperationCompleted = AddressOf Me.OngetVersionOperationCompleted
            End If
            Me.InvokeAsync("getVersion", New Object(-1) {}, Me.getVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OngetVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.getVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVersionCompleted(Me, New getVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ValidarDocumentoElectronico_SinReceptorCompletedEventHandler(ByVal sender As Object, ByVal e As ValidarDocumentoElectronico_SinReceptorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidarDocumentoElectronico_SinReceptorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property cRespuesta() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cError() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cClaveFiscalDocumentoRecibido() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ValidarDocumentoElectronicoCompletedEventHandler(ByVal sender As Object, ByVal e As ValidarDocumentoElectronicoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidarDocumentoElectronicoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property cRespuesta() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cError() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cClaveFiscalDocumentoRecibido() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub RecibirAcuseEmisorCompletedEventHandler(ByVal sender As Object, ByVal e As RecibirAcuseEmisorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecibirAcuseEmisorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property cRespuesta() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cError() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cConsecutivoFiscal() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cClaveFiscal() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ObtenerAcuseRecepcionCompletedEventHandler(ByVal sender As Object, ByVal e As ObtenerAcuseRecepcionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtenerAcuseRecepcionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property cClaveFiscalCR() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cRespuestaXML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cDetalleMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cConsecutivoAcuseRecepcion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cConsecutivoDocumentoRecibido() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cFechaHora() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cCorreoElectronicoEmisor() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cError() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub VistaPreviaAcuseRecepcionCompletedEventHandler(ByVal sender As Object, ByVal e As VistaPreviaAcuseRecepcionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VistaPreviaAcuseRecepcionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property cClaveFiscalCR() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cRespuestaXML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cDetalleMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cConsecutivoAcuseRecepcion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cConsecutivoDocumentoRecibido() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cFechaHora() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cCorreoElectronicoEmisor() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cError() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cMensaje() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ValidarDocumentoElectronico_RespuestaXMLCompletedEventHandler(ByVal sender As Object, ByVal e As ValidarDocumentoElectronico_RespuestaXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidarDocumentoElectronico_RespuestaXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ObtenerAcuseRecepcion_RespuestaXMLCompletedEventHandler(ByVal sender As Object, ByVal e As ObtenerAcuseRecepcion_RespuestaXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtenerAcuseRecepcion_RespuestaXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getVersionCompletedEventHandler(ByVal sender As Object, ByVal e As getVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
